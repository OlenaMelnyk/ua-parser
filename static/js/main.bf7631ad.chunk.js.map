{"version":3,"sources":["App.tsx","index.tsx"],"names":["getDeviceInfo","infoSections","parser","UAParser","userOS","getOS","userDevice","getDevice","userBrowser","getBrowser","name","version","push","value","vendor","model","window","screen","width","height","availWidth","availHeight","innerWidth","innerHeight","devicePixelRatio","console","log","App","className","onClick","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAIMA,EAAgB,WAEpB,IAAMC,EAAe,GACfC,EAAS,IAAIC,IAEbC,EAASF,EAAOG,QAChBC,EAAaJ,EAAOK,YACpBC,EAAcN,EAAOO,aAoC3B,OAlCIL,GAAUA,EAAOM,MAAQN,EAAOO,SAClCV,EAAaW,KAAK,CAAEF,KAAM,KAAMG,MAAM,GAAD,OAAKT,EAAOM,KAAZ,YAAoBN,EAAOO,WAG9DL,GAAcA,EAAWQ,QAAUR,EAAWS,MAChDd,EAAaW,KAAK,CAAEF,KAAM,SAAUG,MAAM,GAAD,OAAKP,EAAWQ,OAAhB,YAA0BR,EAAWS,SAE9Ed,EAAaW,KAAK,CAAEF,KAAM,SAAUG,MAAO,QAGzCL,GAAeA,EAAYE,MAAQF,EAAYG,SACjDV,EAAaW,KAAK,CAAEF,KAAM,UAAWG,MAAM,GAAD,OAAKL,EAAYE,KAAjB,YAAyBF,EAAYG,WAG7EK,SACEA,OAAOC,SACThB,EAAaW,KAAK,CAAEF,KAAM,oBAAqBG,MAAM,GAAD,OAAKG,OAAOC,OAAOC,MAAnB,cAA8BF,OAAOC,OAAOE,UAChGlB,EAAaW,KAAK,CAAEF,KAAM,yBAA0BG,MAAM,GAAD,OAAKG,OAAOC,OAAOG,WAAnB,cAAmCJ,OAAOC,OAAOI,gBAG5GpB,EAAaW,KAAK,CAAEF,KAAM,qBAAsBG,MAAM,GAAD,OAAKG,OAAOM,WAAZ,cAA4BN,OAAOO,eACxFtB,EAAaW,KAAK,CAAEF,KAAM,qBAAsBG,MAAOG,OAAOQ,oBAOhEC,QAAQC,IAAI,mBAAoBzB,GAMzBA,GAGI0B,EAAgB,WAC3B,OACE,qBAAKC,UAAU,UAAf,SACE,yBAAQA,UAAU,iBAAlB,UACE,gDACA,wBAAQC,QAAS7B,EAAe8B,KAAK,SAArC,uBClDRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.bf7631ad.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport UAParser from 'ua-parser-js';\n\nconst getDeviceInfo = () => {\n  // const { userAgent } = navigator;\n  const infoSections = [];\n  const parser = new UAParser();\n\n  const userOS = parser.getOS();\n  const userDevice = parser.getDevice();\n  const userBrowser = parser.getBrowser();\n\n  if (userOS && userOS.name && userOS.version) {\n    infoSections.push({ name: 'OS', value: `${userOS.name} ${userOS.version}` });\n  }\n\n  if (userDevice && userDevice.vendor && userDevice.model) {\n    infoSections.push({ name: 'Device', value: `${userDevice.vendor} ${userDevice.model}` });\n  } else {\n    infoSections.push({ name: 'Device', value: 'N/A' });\n  }\n\n  if (userBrowser && userBrowser.name && userBrowser.version) {\n    infoSections.push({ name: 'Browser', value: `${userBrowser.name} ${userBrowser.version}` });\n  }\n\n  if (window) {\n    if (window.screen) {\n      infoSections.push({ name: 'Screen resolution', value: `${window.screen.width} x ${window.screen.height}` });\n      infoSections.push({ name: 'Available screen space', value: `${window.screen.availWidth} x ${window.screen.availHeight}` });\n    }\n\n    infoSections.push({ name: 'Browser width size', value: `${window.innerWidth} x ${window.innerHeight}` });\n    infoSections.push({ name: 'Device pixel ratio', value: window.devicePixelRatio });\n  }\n\n  // parser.setUA(userAgent);\n  // const result = parser.getResult();\n\n  // eslint-disable-next-line no-console\n  console.log('*** infoSections', infoSections);\n  // const deviceType = (result.device && result.device.type) || 'desktop';\n\n  // eslint-disable-next-line no-console\n  // console.log('*** device type', deviceType);\n\n  return infoSections;\n};\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"starter\">\n      <header className=\"starter-header\">\n        <p>Get device Info</p>\n        <button onClick={getDeviceInfo} type=\"button\">Get</button>\n      </header>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}